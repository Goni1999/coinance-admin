import React, { useState, useEffect } from "react";
import { useTranslations } from "next-intl";
interface Transaction {
    transaction_id?: number; // auto-generated by the database, so it is optional here
    user_id: string;
    balance_id: string;
    time: string;
    type: string;
    coin: string;
    amount: string;
    destination: string;
    txid: string;
    status: string;
    details: string;
    admin_email: string; // This will be automatically filled based on the logged-in user
  }
  
  
interface User {
  id: string;
  first_name: string;
  last_name: string;
  unpaid_amount: number;
  transactions: Transaction[];
}

const TransactionsHistory = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [isTransactionModalOpen, setIsTransactionModalOpen] = useState(false);
  const [isAddTransactionModalOpen, setIsAddTransactionModalOpen] = useState(false);
  const t = useTranslations();
  const [newTransaction, setNewTransaction] = useState<Transaction>({
    user_id: '', // Default to 0, will be updated when selecting a user
    balance_id: '',
    time: '', // Time will be filled when the transaction is created
    type: '',
    coin: '',
    amount: '',
    destination: '',
    txid: '',
    status: '',
    details: '',
    admin_email: '', // Admin email will be set from the logged-in user
  });
  
  useEffect(() => {
    // Fetch users (this can be an API call)
    const fetchUsers = async () => {
      const token = sessionStorage.getItem("auth-token");
      if (!token) {
        console.error("No token found. Please log in.");
        return;
      }

      try {
        const response = await fetch("https://server.capital-trust.eu/api/users-admin", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const usersData = await response.json();
          setUsers(usersData);
        } else {
          console.error("Failed to fetch users");
        }
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };

    fetchUsers();
  }, []);
  
  const openTransactionModal = (user: User) => {
    setSelectedUser(user);
    setIsTransactionModalOpen(true);
  };

  const closeTransactionModal = () => {
    setIsTransactionModalOpen(false);
  };



  const closeAddTransactionModal = () => {
    setIsAddTransactionModalOpen(false);
  };

  const openAddTransactionModal = (user: User) => {
    setSelectedUser(user);
    setIsAddTransactionModalOpen(true);
    setNewTransaction((prevTransaction) => ({
      ...prevTransaction,
      user_id: user.id,
      admin_email: sessionStorage.getItem("auth-email") || '', // Set admin_email from logged-in user
    }));
  };
  
  const handleTransactionChange = (field: keyof Transaction, value: string) => {
    setNewTransaction((prevTransaction) => ({
      ...prevTransaction,
      [field]: value,
    }));
  };
  
  const handleAddTransaction = () => {
    if (selectedUser && newTransaction) {
      // Add the transaction logic here
      // For example, send the transaction data to the server
      addTransactionToDatabase(newTransaction); // This function will handle adding the transaction to the DB
  
      setIsAddTransactionModalOpen(false);
      setNewTransaction({
        user_id: selectedUser.id,
        balance_id: '',
        time: '',
        type: '',
        coin: '',
        amount: '',
        destination: '',
        txid: '',
        status: '',
        details: '',
        admin_email: sessionStorage.getItem("auth-email") || '',
      }); // Reset after adding
    }
  };
  

  return (
    <div className="col-span-12">
      <div className="rounded-2xl border border-gray-200 bg-white pt-4 dark:border-gray-800 dark:bg-white/[0.03]">
        <div className="flex flex-col gap-2 px-5 mb-4 sm:flex-row sm:items-center sm:justify-between sm:px-6">
          <div>
            <h3 className="text-lg font-semibold text-gray-800 dark:text-white/90">
              {t("transaction1")}
            </h3>
          </div>
        </div>

        <div className="overflow-hidden">
          <div className="max-w-full px-5 overflow-x-auto sm:px-6">
            <div>
              {users.map((user) => (
                <div key={user.id} className="rounded-2xl border border-gray-200 bg-white p-5 dark:border-gray-800 dark:bg-white/[0.03] md:p-6">
                  <div className="flex items-end justify-between mt-5">
                    <div>
                      <span className="text-sm text-gray-500 dark:text-gray-400">{`${user.first_name} ${user.last_name}`}</span>
                      <h4 className="mt-2 font-bold text-gray-800 text-title-sm dark:text-white/90">
                        Unpaid: ${user.unpaid_amount.toFixed(2)}
                      </h4>
                    </div>
                    <div className="flex flex-col items-end">
                      <button
                        onClick={() => openTransactionModal(user)}
                        className="mt-2 inline-flex items-center px-2.5 py-0.5 justify-center gap-1 rounded-full font-medium bg-blue-50 dark:bg-blue-500/15 text-blue-500 hover:text-blue-700 text-sm"
                      >
                        Show All
                      </button>
                      <button
                        onClick={() => openAddTransactionModal(user)}
                        className="mt-2 inline-flex items-center px-2.5 py-0.5 justify-center gap-1 rounded-full font-medium bg-green-50 dark:bg-green-500/15 text-green-500 hover:text-green-700 text-sm"
                      >
                        Add Transaction
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Transaction Modal */}
      {isTransactionModalOpen && selectedUser && (
        <div className="modal">
          <div className="modal-content">
            <button onClick={closeTransactionModal}>Close</button>
            <h3>Transactions for {selectedUser.first_name} {selectedUser.last_name}</h3>
            <div>
              {selectedUser.transactions.map((transaction, index) => (
                <div key={index}>
                  <p>Time: {transaction.time}</p>
                  <p>Type: {transaction.type}</p>
                  <p>Amount: {transaction.amount}</p>
                  <p>Status: {transaction.status}</p>
                  <p>Transaction ID: {transaction.txid}</p>
                  <p>Balance ID: {transaction.balance_id}</p>
                  <hr />
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

{isAddTransactionModalOpen && selectedUser && (
  <div className="modal">
    <div className="modal-content">
      <button onClick={closeAddTransactionModal}>Close</button>
      <h3>Add Transaction for {selectedUser.first_name} {selectedUser.last_name}</h3>

      {/* Type */}
      <div>
        <label>Type</label>
        <select
          value={newTransaction.type}
          onChange={(e) => handleTransactionChange("type", e.target.value)}
        >
          <option value="Deposit">Deposit</option>
          <option value="Withdrawal">Withdrawal</option>
        </select>
      </div>

      {/* Coin */}
      <div>
        <label>Coin</label>
        <input
          type="text"
          value={newTransaction.coin}
          onChange={(e) => handleTransactionChange("coin", e.target.value)}
        />
      </div>

      {/* Amount */}
      <div>
        <label>Amount</label>
        <input
          type="text"
          value={newTransaction.amount}
          onChange={(e) => handleTransactionChange("amount", e.target.value)}
        />
      </div>

      {/* Destination */}
      <div>
        <label>Destination</label>
        <input
          type="text"
          value={newTransaction.destination}
          onChange={(e) => handleTransactionChange("destination", e.target.value)}
        />
      </div>

      {/* TXID */}
      <div>
        <label>Transaction ID (TXID)</label>
        <input
          type="text"
          value={newTransaction.txid}
          onChange={(e) => handleTransactionChange("txid", e.target.value)}
        />
      </div>

      {/* Status */}
      <div>
        <label>Status</label>
        <select
          value={newTransaction.status}
          onChange={(e) => handleTransactionChange("status", e.target.value)}
        >
          <option value="Success">Success</option>
          <option value="Failed">Failed</option>
          <option value="Pending">Pending</option>
        </select>
      </div>

      {/* Details */}
      <div>
        <label>Details</label>
        <textarea
          value={newTransaction.details}
          onChange={(e) => handleTransactionChange("details", e.target.value)}
        />
      </div>

      {/* Add Transaction Button */}
      <button onClick={handleAddTransaction}>Add Transaction</button>
    </div>
  </div>
)}

    </div>
  );
};

export default TransactionsHistory;
function addTransactionToDatabase(newTransaction: Transaction) {
    throw new Error("Function not implemented.");
}

